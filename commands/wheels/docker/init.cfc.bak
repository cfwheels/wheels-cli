/**
 * Initialize Docker configuration for development
 * 
 * {code:bash}
 * wheels docker:init
 * wheels docker:init --db=mysql
 * wheels docker:init --db=postgres --dbVersion=13
 * {code}
 */
component extends="../base" {

    /**
     * @db Database to use (h2, mysql, postgres, mssql)
     * @dbVersion Database version to use
     * @cfengine ColdFusion engine to use (lucee, adobe)
     * @cfVersion ColdFusion engine version
     */
    function run(
        string db="mysql",
        string dbVersion="",
        string cfengine="lucee",
        string cfVersion="5.3"
    ) {
        // Welcome message
        print.line();
        print.boldMagentaLine("Wheels Docker Configuration");
        print.line();
        
        // Validate inputs
        local.validDatabases = ["h2", "mysql", "postgres", "mssql"];
        if (!arrayContains(local.validDatabases, lCase(arguments.db))) {
            error("Invalid database: #arguments.db#. Please choose from: #arrayToList(local.validDatabases)#");
        }
        
        local.validEngines = ["lucee", "adobe"];
        if (!arrayContains(local.validEngines, lCase(arguments.cfengine))) {
            error("Invalid ColdFusion engine: #arguments.cfengine#. Please choose from: #arrayToList(local.validEngines)#");
        }
        
        // Set default DB versions if not specified
        if (len(trim(arguments.dbVersion)) == 0) {
            switch (lCase(arguments.db)) {
                case "mysql":
                    arguments.dbVersion = "8.0";
                    break;
                case "postgres":
                    arguments.dbVersion = "14";
                    break;
                case "mssql":
                    arguments.dbVersion = "2019";
                    break;
                case "h2":
                    arguments.dbVersion = "latest";
                    break;
            }
        }
        
        // Create docker-compose.yml
        createDockerComposeFile(arguments.db, arguments.dbVersion, arguments.cfengine, arguments.cfVersion);
        
        // Create Dockerfile
        createDockerfile(arguments.cfengine, arguments.cfVersion);
        
        // Create database initialization scripts
        createDbInitScripts(arguments.db);
        
        // Create .dockerignore
        createDockerIgnore();
        
        print.line();
        print.boldGreenLine("Docker configuration created successfully!");
        print.line();
        print.yellowLine("To start your development environment:");
        print.line("1. Run: docker-compose up -d");
        print.line("2. Access your application at: http://localhost:8080");
        print.line();
    }
    
    /**
     * Create docker-compose.yml file
     */
    private void function createDockerComposeFile(
        required string db,
        required string dbVersion,
        required string cfengine,
        required string cfVersion
    ) {
        local.composePath = fileSystemUtil.resolvePath("docker-compose.yml");
        
        local.dbService = getDbServiceConfig(arguments.db, arguments.dbVersion);
        
        local.composeContent = "version: '3.8'

services:
  cfwheels:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    volumes:
      - ./:/app
    depends_on:
      - #arguments.db#
    environment:
      - WHEELS_ENVIRONMENT=development
      ## Database connection settings
      - WHEELS_DATASOURCE_NAME=#arguments.db#
      - WHEELS_DATASOURCE_HOST=#arguments.db#
#local.dbService.cfEnvironment#

#local.dbService.service#
      
  # Add additional services as needed (redis, etc.)

volumes:
  #arguments.db#_data:
    driver: local";
        
        file action='write' file='#local.composePath#' mode='777' output='#local.composeContent#';
        print.greenLine("Created docker-compose.yml");
    }
    
    /**
     * Create Dockerfile for the ColdFusion application
     */
    private void function createDockerfile(
        required string cfengine,
        required string cfVersion
    ) {
        local.dockerfilePath = fileSystemUtil.resolvePath("Dockerfile");
        
        local.dockerfileContent = "";
        
        // Use different Dockerfile content based on the CF engine
        if (lCase(arguments.cfengine) == "lucee") {
            local.dockerfileContent = "FROM lucee/lucee:#arguments.cfVersion#

# Install CommandBox
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Install CommandBox
RUN curl -fsSl https://downloads.ortussolutions.com/debs/gpg | gpg --dearmor > /etc/apt/trusted.gpg.d/ortussolutions.gpg && \
    echo 'deb [trusted=yes] https://downloads.ortussolutions.com/debs/noarch /' > /etc/apt/sources.list.d/commandbox.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    commandbox \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the application
COPY . .

# Make sure directory permissions are set correctly
RUN chmod -R 755 /app

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 CMD curl -f http://localhost:8080/ || exit 1

# Start Lucee
CMD ["catalina.sh", "run"]";
        } else {
            // Adobe ColdFusion Dockerfile
            local.dockerfileContent = "FROM adobecoldfusion/#arguments.cfVersion#:latest

WORKDIR /app

# Copy the application
COPY . .

# Make sure directory permissions are set correctly
RUN chmod -R 755 /app

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 CMD curl -f http://localhost:8080/ || exit 1

# Start Adobe ColdFusion
CMD ["/opt/coldfusion/bin/coldfusion", "start"]";
        }
        
        file action='write' file='#local.dockerfilePath#' mode='777' output='#local.dockerfileContent#';
        print.greenLine("Created Dockerfile");
    }
    
    /**
     * Create database initialization scripts
     */
    private void function createDbInitScripts(required string db) {
        local.dbScriptsPath = fileSystemUtil.resolvePath("docker/db");
        
        if (!directoryExists(local.dbScriptsPath)) {
            directoryCreate(local.dbScriptsPath, true);
        }
        
        // Create initialization script based on database type
        switch (lCase(arguments.db)) {
            case "mysql":
                createMySqlInit(local.dbScriptsPath);
                break;
            case "postgres":
                createPostgresInit(local.dbScriptsPath);
                break;
            case "mssql":
                createMsSqlInit(local.dbScriptsPath);
                break;
            case "h2":
                // H2 doesn't need initialization scripts
                break;
        }
    }
    
    /**
     * Create MySQL initialization script
     */
    private void function createMySqlInit(required string path) {
        local.initSqlPath = arguments.path & "/init.sql";
        
        local.initSqlContent = "-- MySQL initialization script for Wheels Docker setup
CREATE DATABASE IF NOT EXISTS cfwheels;
USE cfwheels;

-- Create a user for the application
CREATE USER IF NOT EXISTS 'cfwheels'@'%' IDENTIFIED BY 'cfwheels';
GRANT ALL PRIVILEGES ON cfwheels.* TO 'cfwheels'@'%';
FLUSH PRIVILEGES;

-- Add your schema initialization here or use migrations
";
        
        file action='write' file='#local.initSqlPath#' mode='777' output='#local.initSqlContent#';
        print.greenLine("Created MySQL initialization script");
    }
    
    /**
     * Create PostgreSQL initialization script
     */
    private void function createPostgresInit(required string path) {
        local.initSqlPath = arguments.path & "/init.sql";
        
        local.initSqlContent = "-- PostgreSQL initialization script for Wheels Docker setup

-- Create a user for the application
CREATE USER cfwheels WITH PASSWORD 'cfwheels';

-- Create the database
CREATE DATABASE cfwheels OWNER cfwheels;

-- Connect to the database
\\c cfwheels

-- Add your schema initialization here or use migrations
";
        
        file action='write' file='#local.initSqlPath#' mode='777' output='#local.initSqlContent#';
        print.greenLine("Created PostgreSQL initialization script");
    }
    
    /**
     * Create MSSQL initialization script
     */
    private void function createMsSqlInit(required string path) {
        local.initSqlPath = arguments.path & "/init.sql";
        
        local.initSqlContent = "-- SQL Server initialization script for Wheels Docker setup

-- Create the database
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'cfwheels')
BEGIN
    CREATE DATABASE cfwheels;
END
GO

USE cfwheels;
GO

-- Create a user for the application
IF NOT EXISTS (SELECT * FROM sys.server_principals WHERE name = 'cfwheels')
BEGIN
    CREATE LOGIN cfwheels WITH PASSWORD = 'cfwheels';
END
GO

IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = 'cfwheels')
BEGIN
    CREATE USER cfwheels FOR LOGIN cfwheels;
    EXEC sp_addrolemember 'db_owner', 'cfwheels';
END
GO

-- Add your schema initialization here or use migrations
";
        
        file action='write' file='#local.initSqlPath#' mode='777' output='#local.initSqlContent#';
        print.greenLine("Created SQL Server initialization script");
    }
    
    /**
     * Create .dockerignore file
     */
    private void function createDockerIgnore() {
        local.dockerIgnorePath = fileSystemUtil.resolvePath(".dockerignore");
        
        local.dockerIgnoreContent = "# .dockerignore for Wheels application

# Version control
.git
.gitignore
.svn

# Docker related
Dockerfile
docker-compose.yml
docker/

# Temporary files
tmp/
temp/

# Logs
logs/
*.log

# Dependencies
node_modules/

# Build artifacts
build/
dist/

# Editor specific files
.vscode/
.idea/
*.sublime-*

# OS specific files
.DS_Store
Thumbs.db
";
        
        file action='write' file='#local.dockerIgnorePath#' mode='777' output='#local.dockerIgnoreContent#';
        print.greenLine("Created .dockerignore");
    }
    
    /**
     * Get database service configuration for docker-compose.yml
     */
    private struct function getDbServiceConfig(
        required string db,
        required string dbVersion
    ) {
        local.result = {
            "service": "",
            "cfEnvironment": ""
        };
        
        switch (lCase(arguments.db)) {
            case "mysql":
                local.result.service = "  mysql:
    image: mysql:#arguments.dbVersion#
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=cfwheels
      - MYSQL_USER=cfwheels
      - MYSQL_PASSWORD=cfwheels
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/db:/docker-entrypoint-initdb.d
    ports:
      - '3306:3306'";
                
                local.result.cfEnvironment = "      - WHEELS_DATASOURCE_USERNAME=cfwheels
      - WHEELS_DATASOURCE_PASSWORD=cfwheels
      - WHEELS_DATASOURCE_DATABASE=cfwheels
      - WHEELS_DATASOURCE_PORT=3306";
                break;
                
            case "postgres":
                local.result.service = "  postgres:
    image: postgres:#arguments.dbVersion#
    environment:
      - POSTGRES_USER=cfwheels
      - POSTGRES_PASSWORD=cfwheels
      - POSTGRES_DB=cfwheels
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/db:/docker-entrypoint-initdb.d
    ports:
      - '5432:5432'";
                
                local.result.cfEnvironment = "      - WHEELS_DATASOURCE_USERNAME=cfwheels
      - WHEELS_DATASOURCE_PASSWORD=cfwheels
      - WHEELS_DATASOURCE_DATABASE=cfwheels
      - WHEELS_DATASOURCE_PORT=5432";
                break;
                
            case "mssql":
                local.result.service = "  mssql:
    image: mcr.microsoft.com/mssql/server:#arguments.dbVersion#
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=cfWheels123
      - MSSQL_PID=Developer
    volumes:
      - mssql_data:/var/opt/mssql
      - ./docker/db:/docker-entrypoint-initdb.d
    ports:
      - '1433:1433'";
                
                local.result.cfEnvironment = "      - WHEELS_DATASOURCE_USERNAME=sa
      - WHEELS_DATASOURCE_PASSWORD=cfWheels123
      - WHEELS_DATASOURCE_DATABASE=cfwheels
      - WHEELS_DATASOURCE_PORT=1433";
                break;
                
            case "h2":
                local.result.service = "  h2:
    image: oscarfonts/h2:#arguments.dbVersion#
    volumes:
      - h2_data:/opt/h2-data
    ports:
      - '1521:1521'
      - '8082:81'";
                
                local.result.cfEnvironment = "      - WHEELS_DATASOURCE_USERNAME=sa
      - WHEELS_DATASOURCE_PASSWORD=
      - WHEELS_DATASOURCE_DATABASE=cfwheels
      - WHEELS_DATASOURCE_PORT=1521";
                break;
        }
        
        return local.result;
    }
}